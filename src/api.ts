// tslint:disable
/**
 * The Fission API
 * Bootstrapped & distributed backend-as-a-service with user-controlled data
 *
 * The version of the OpenAPI document: 1.20.0
 * Contact: support@fission.codes
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DomainName
 */
export interface DomainName {
    /**
     * 
     * @type {string}
     * @memberof DomainName
     */
    getDomainName: string;
}
/**
 * 
 * @export
 * @interface Password
 */
export interface Password {
    /**
     * 
     * @type {string}
     * @memberof Password
     */
    password: string;
}
/**
 * Password Reset Request
 * @export
 * @interface PasswordResetRequest
 */
export interface PasswordResetRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordResetRequest
     */
    password?: string;
}
/**
 * Request from Heroku to provision a new user
 * @export
 * @interface ProvisionRequest
 */
export interface ProvisionRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvisionRequest
     */
    callbackUrl: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisionRequest
     */
    name: string;
    /**
     * 
     * @type {Tier}
     * @memberof ProvisionRequest
     */
    plan: Tier;
    /**
     * 
     * @type {Region}
     * @memberof ProvisionRequest
     */
    region: Region;
    /**
     * 
     * @type {string}
     * @memberof ProvisionRequest
     */
    uuid: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum Region {
    UsWest1 = 'amazon-web-services::us-west-1',
    EuWest1 = 'amazon-web-services::eu-west-1',
    EuCentral1 = 'amazon-web-services::eu-central-1',
    UsWest2 = 'amazon-web-services::us-west-2',
    ApSoutheast1 = 'amazon-web-services::ap-southeast-1',
    ApSoutheast2 = 'amazon-web-services::ap-southeast-2',
    ApNortheast1 = 'amazon-web-services::ap-northeast-1',
    UsEast1 = 'amazon-web-services::us-east-1'
}

/**
 * The information that a user needs to provide to login/register.
 * @export
 * @interface Registration
 */
export interface Registration {
    /**
     * 
     * @type {string}
     * @memberof Registration
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof Registration
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof Registration
     */
    email?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum Tier {
    Test = 'test',
    Free = 'free'
}

/**
 * The information that a user needs to know to access this service. Typically sent on provision
 * @export
 * @interface UserConfig
 */
export interface UserConfig {
    /**
     * 
     * @type {string}
     * @memberof UserConfig
     */
    INTERPLANETARY_FISSION_URL?: string;
    /**
     * 
     * @type {string}
     * @memberof UserConfig
     */
    INTERPLANETARY_FISSION_USERNAME?: string;
    /**
     * User secret (used for authentication)
     * @type {string}
     * @memberof UserConfig
     */
    INTERPLANETARY_FISSION_PASSWORD?: string;
}
/**
 * Provisioned user login information
 * @export
 * @interface UserProvisionResponse
 */
export interface UserProvisionResponse {
    /**
     * 
     * @type {number}
     * @memberof UserProvisionResponse
     */
    id: number;
    /**
     * 
     * @type {UserConfig}
     * @memberof UserProvisionResponse
     */
    config: UserConfig;
    /**
     * 
     * @type {string}
     * @memberof UserProvisionResponse
     */
    message?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserProvisionResponse
     */
    peers?: Array<string>;
}

/**
 * DNSApi - axios parameter creator
 * @export
 */
export const DNSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnsCidPut(cid: string, options: any = {}): RequestArgs {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling dnsCidPut.');
            }
            const localVarPath = `/dns/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DNSApi - functional programming interface
 * @export
 */
export const DNSApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnsCidPut(cid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainName> {
            const localVarAxiosArgs = DNSApiAxiosParamCreator(configuration).dnsCidPut(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DNSApi - factory interface
 * @export
 */
export const DNSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnsCidPut(cid: string, options?: any) {
            return DNSApiFp(configuration).dnsCidPut(cid, options)(axios, basePath);
        },
    };
};

/**
 * DNSApi - object-oriented interface
 * @export
 * @class DNSApi
 * @extends {BaseAPI}
 */
export class DNSApi extends BaseAPI {
    /**
     * 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DNSApi
     */
    public dnsCidPut(cid: string, options?: any) {
        return DNSApiFp(this.configuration).dnsCidPut(cid, options)(this.axios, this.basePath);
    }

}


/**
 * HerokuApi - axios parameter creator
 * @export
 */
export const HerokuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} addonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        herokuResourcesAddonIdDelete(addonId: string, options: any = {}): RequestArgs {
            // verify required parameter 'addonId' is not null or undefined
            if (addonId === null || addonId === undefined) {
                throw new RequiredError('addonId','Required parameter addonId was null or undefined when calling herokuResourcesAddonIdDelete.');
            }
            const localVarPath = `/heroku/resources/{addon_id}`
                .replace(`{${"addon_id"}}`, encodeURIComponent(String(addonId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProvisionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        herokuResourcesPost(body: ProvisionRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling herokuResourcesPost.');
            }
            const localVarPath = `/heroku/resources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HerokuApi - functional programming interface
 * @export
 */
export const HerokuApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} addonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        herokuResourcesAddonIdDelete(addonId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = HerokuApiAxiosParamCreator(configuration).herokuResourcesAddonIdDelete(addonId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ProvisionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        herokuResourcesPost(body: ProvisionRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProvisionResponse> {
            const localVarAxiosArgs = HerokuApiAxiosParamCreator(configuration).herokuResourcesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HerokuApi - factory interface
 * @export
 */
export const HerokuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} addonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        herokuResourcesAddonIdDelete(addonId: string, options?: any) {
            return HerokuApiFp(configuration).herokuResourcesAddonIdDelete(addonId, options)(axios, basePath);
        },
        /**
         * 
         * @param {ProvisionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        herokuResourcesPost(body: ProvisionRequest, options?: any) {
            return HerokuApiFp(configuration).herokuResourcesPost(body, options)(axios, basePath);
        },
    };
};

/**
 * HerokuApi - object-oriented interface
 * @export
 * @class HerokuApi
 * @extends {BaseAPI}
 */
export class HerokuApi extends BaseAPI {
    /**
     * 
     * @param {string} addonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HerokuApi
     */
    public herokuResourcesAddonIdDelete(addonId: string, options?: any) {
        return HerokuApiFp(this.configuration).herokuResourcesAddonIdDelete(addonId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ProvisionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HerokuApi
     */
    public herokuResourcesPost(body: ProvisionRequest, options?: any) {
        return HerokuApiFp(this.configuration).herokuResourcesPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * IPFSApi - axios parameter creator
 * @export
 */
export const IPFSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidDelete(cid: string, options: any = {}): RequestArgs {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling ipfsCidDelete.');
            }
            const localVarPath = `/ipfs/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidGet(cid: string, options: any = {}): RequestArgs {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling ipfsCidGet.');
            }
            const localVarPath = `/ipfs/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidPut(cid: string, options: any = {}): RequestArgs {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling ipfsCidPut.');
            }
            const localVarPath = `/ipfs/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidsGet(options: any = {}): RequestArgs {
            const localVarPath = `/ipfs/cids`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsDagPost(body: string, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipfsDagPost.');
            }
            const localVarPath = `/ipfs/dag`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain;charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsGet(cid?: string, options: any = {}): RequestArgs {
            const localVarPath = `/ipfs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsPeersGet(options: any = {}): RequestArgs {
            const localVarPath = `/ipfs/peers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsPost(name?: string, options: any = {}): RequestArgs {
            const localVarPath = `/ipfs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPFSApi - functional programming interface
 * @export
 */
export const IPFSApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidDelete(cid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IPFSApiAxiosParamCreator(configuration).ipfsCidDelete(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidGet(cid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = IPFSApiAxiosParamCreator(configuration).ipfsCidGet(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidPut(cid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IPFSApiAxiosParamCreator(configuration).ipfsCidPut(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = IPFSApiAxiosParamCreator(configuration).ipfsCidsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsDagPost(body: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = IPFSApiAxiosParamCreator(configuration).ipfsDagPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsGet(cid?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = IPFSApiAxiosParamCreator(configuration).ipfsGet(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsPeersGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = IPFSApiAxiosParamCreator(configuration).ipfsPeersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsPost(name?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = IPFSApiAxiosParamCreator(configuration).ipfsPost(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IPFSApi - factory interface
 * @export
 */
export const IPFSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidDelete(cid: string, options?: any) {
            return IPFSApiFp(configuration).ipfsCidDelete(cid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidGet(cid: string, options?: any) {
            return IPFSApiFp(configuration).ipfsCidGet(cid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidPut(cid: string, options?: any) {
            return IPFSApiFp(configuration).ipfsCidPut(cid, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsCidsGet(options?: any) {
            return IPFSApiFp(configuration).ipfsCidsGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsDagPost(body: string, options?: any) {
            return IPFSApiFp(configuration).ipfsDagPost(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsGet(cid?: string, options?: any) {
            return IPFSApiFp(configuration).ipfsGet(cid, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsPeersGet(options?: any) {
            return IPFSApiFp(configuration).ipfsPeersGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsPost(name?: string, options?: any) {
            return IPFSApiFp(configuration).ipfsPost(name, options)(axios, basePath);
        },
    };
};

/**
 * IPFSApi - object-oriented interface
 * @export
 * @class IPFSApi
 * @extends {BaseAPI}
 */
export class IPFSApi extends BaseAPI {
    /**
     * 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPFSApi
     */
    public ipfsCidDelete(cid: string, options?: any) {
        return IPFSApiFp(this.configuration).ipfsCidDelete(cid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPFSApi
     */
    public ipfsCidGet(cid: string, options?: any) {
        return IPFSApiFp(this.configuration).ipfsCidGet(cid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPFSApi
     */
    public ipfsCidPut(cid: string, options?: any) {
        return IPFSApiFp(this.configuration).ipfsCidPut(cid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPFSApi
     */
    public ipfsCidsGet(options?: any) {
        return IPFSApiFp(this.configuration).ipfsCidsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPFSApi
     */
    public ipfsDagPost(body: string, options?: any) {
        return IPFSApiFp(this.configuration).ipfsDagPost(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPFSApi
     */
    public ipfsGet(cid?: string, options?: any) {
        return IPFSApiFp(this.configuration).ipfsGet(cid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPFSApi
     */
    public ipfsPeersGet(options?: any) {
        return IPFSApiFp(this.configuration).ipfsPeersGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPFSApi
     */
    public ipfsPost(name?: string, options?: any) {
        return IPFSApiFp(this.configuration).ipfsPost(name, options)(this.axios, this.basePath);
    }

}


/**
 * PingApi - axios parameter creator
 * @export
 */
export const PingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options: any = {}): RequestArgs {
            const localVarPath = `/ping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingApi - functional programming interface
 * @export
 */
export const PingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = PingApiAxiosParamCreator(configuration).pingGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PingApi - factory interface
 * @export
 */
export const PingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options?: any) {
            return PingApiFp(configuration).pingGet(options)(axios, basePath);
        },
    };
};

/**
 * PingApi - object-oriented interface
 * @export
 * @class PingApi
 * @extends {BaseAPI}
 */
export class PingApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingApi
     */
    public pingGet(options?: any) {
        return PingApiFp(this.configuration).pingGet(options)(this.axios, this.basePath);
    }

}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Registration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost(body: Registration, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userPost.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PasswordResetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userResetPasswordPut(body: PasswordResetRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userResetPasswordPut.');
            }
            const localVarPath = `/user/reset_password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userVerifyGet(options: any = {}): RequestArgs {
            const localVarPath = `/user/verify`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Registration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost(body: Registration, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).userPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PasswordResetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userResetPasswordPut(body: PasswordResetRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Password> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).userResetPasswordPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userVerifyGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).userVerifyGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {Registration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost(body: Registration, options?: any) {
            return UsersApiFp(configuration).userPost(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {PasswordResetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userResetPasswordPut(body: PasswordResetRequest, options?: any) {
            return UsersApiFp(configuration).userResetPasswordPut(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userVerifyGet(options?: any) {
            return UsersApiFp(configuration).userVerifyGet(options)(axios, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {Registration} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userPost(body: Registration, options?: any) {
        return UsersApiFp(this.configuration).userPost(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {PasswordResetRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userResetPasswordPut(body: PasswordResetRequest, options?: any) {
        return UsersApiFp(this.configuration).userResetPasswordPut(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userVerifyGet(options?: any) {
        return UsersApiFp(this.configuration).userVerifyGet(options)(this.axios, this.basePath);
    }

}


